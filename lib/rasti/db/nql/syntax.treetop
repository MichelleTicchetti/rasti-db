module Rasti
  module DB
    module NQL
      grammar Syntax
        
        rule sentence
          space* proposition:proposition space* <Nodes::Sentence>
        end

        rule proposition
          disjunction /
          conjunction /
          statement
        end

        rule disjunction
          left:(conjunction / statement) space* '|' space* right:proposition <Nodes::Disjunction>
        end

        rule conjunction
          left:statement space* '&' space* right:(conjunction / statement) <Nodes::Conjunction>
        end

        rule statement
          parenthesis_sentence /
          comparison
        end

        rule parenthesis_sentence
          '(' sentence ')' <Nodes::ParenthesisSentence>
        end

        rule comparison
          left:field space* comparator:comparator space* right:basic <Nodes::Comparison>
        end

        rule field
          _tables:(table:field_name '.')* _name:field_name <Nodes::Field>
        end

        rule comparator
          ':'  /
          '!:' /
          '~'  /
          '>=' /
          '<=' /
          '>'  /
          '<'  /
          '!=' /
          '='
        end

        rule basic
          boolean        /
          time           /
          float          /
          integer        /
          literal_string /
          string
        end

        rule space
          [\s\t\n]
        end

        rule field_name
          [a-z_]+
        end

        rule time
          date:(value:date 'T')? hour:(digit digit) ':' minutes:(digit digit) seconds:(':' value:(digit digit))? timezone:(value:timezone)? <Nodes::Constants::Time>
        end

        rule date
          year:(digit digit digit digit) '-' month:(digit digit) '-' day:(digit digit)
        end

        rule timezone
          sign:sign hour:(digit digit) ':' minutes:(digit digit)
        end

        rule sign
          '+' / 
          '-'
        end

        rule literal_string
          '"' string:any_character+ '"' <Nodes::Constants::LiteralString>
        end

        rule string
          valid_character+ <Nodes::Constants::String>
        end

        rule any_character
          valid_character /
          reserved_character
        end

        rule valid_character 
          [0-9a-zA-ZÁÀÄÂÃÅĀĂǍáàäâãåāăǎÉÈËÊĒĔĖĚéèëêēĕėěÍÌÏÎĨĬǏíìïîĩĭǐÓÒÖÔÕŌŎŐǑóòöôõōŏőǒÚÙÜÛŨŪŬŮŰǓúùüûũūŭůűǔÑñçÇ%@#+-_'?!$*/\s]
        end

        rule boolean
          true /
          false
        end

        rule true
          'true' <Nodes::Constants::True>
        end

        rule false
          'false' <Nodes::Constants::False>
        end

        rule float
          digit+ '.' digit+ <Nodes::Constants::Float>
        end

        rule integer
          digit+ <Nodes::Constants::Integer>
        end

        rule digit
          [0-9]
        end

        rule reserved_character
          [&|.():!=<>~]
        end

      end
    end
  end
end